/*Name: Jalyn CosbyAssignment: Project 4Description: Create an interactive driver that will easily allow user to manipulate a Binary Search Tree. Your BST should have a list cursor (a pointer that points to the “current”  item in the list).  The user should be able to enter one command and arguments per line or the user should be able to stack commands.  Again, the list should be printed the line above the UI cursor,so the user knows the current state of the BST.  Class: CS 355-01*/#include <iostream>#include <string>#include <fstream>#include <limits>#include "BST.h"using namespace std;void menu();template <class T>void BuildBST(BST<T>& bst, string filename);int main(){	BST<int> bst;	string filename;		char operation;	int operand;	bool run = true;		menu();	while(run){		bst.PrintInOrder();		cout << endl;		cin >> operation;				switch(operation){		    //Insert			case '+':				cin >> operand;				if(cin.fail()){					cin.clear();					cin.ignore(numeric_limits<int>::max(),'\n');                	cout << "Invalid input. + must be followed by an int." << endl;				} else {					cout << endl << "Insert(" << operand << ")" << endl;					bst.Insert(operand);				}				break;						//Remove			case '-':				cin >> operand;				if(cin.fail()){					cin.clear();					cin.ignore(numeric_limits<int>::max(),'\n');                	cout << "Invalid input. - must be followed by an int." << endl;				} else {					cout << endl <<"Remove(" << operand << ")" << endl;					bst.Remove(operand);				}				break;						//Find			case '?':				cin >> operand;				if(cin.fail()){					cin.clear();					cin.ignore(numeric_limits<int>::max(),'\n');                	cout << "Invalid input. - must be followed by an int." << endl;				} else {					cout << endl <<"Search(" << operand << "): ";					if(bst.Find(operand))						cout << "Found" << endl;					else						cout << "Not found" << endl;				}				break;						//PrintInOrder			case 'P':			case 'p':			    cout << endl << "Printlist In Order: ";			    bst.PrintInOrder(); cout << endl;			    break;			            //PrintPostOrder            case 'S':            case 's':                cout << endl << "Printlist Post Order: ";                bst.PrintPostOrder(); cout << endl;                break;                        //PrintPreOrder            case 'R':            case 'r':                cout << endl << "Printlist Pre Order: ";                bst.PrintPreOrder(); cout << endl;                break;                        //Build BST using large data set from file            case 'B':            	cin >> filename;            	if(cin.fail()){					cin.clear();					cin.ignore(numeric_limits<int>::max(),'\n');                	cout << "Invalid input. B must be followed by a filename." << endl;				} else {					BuildBST(bst, filename);                	cout << endl;				}                break;            			//PrintItem			case '@':			    cout << endl << "PrintItem: ";			    bst.PrintItem(); cout << endl;			    break;			    			//Move(right)            case '>':                cout << endl << "Move(right): " << endl;            	bst.Move(operation);                break;                        //Move(left)            case '<':                cout << endl << "Move(left): " << endl;                bst.Move(operation);                break;                        //Move(begining)            case 'b':                cout << endl << "Move(begining): " << endl;                bst.Move(operation);                break;                        //Move(end)            case 'E':            case 'e':                cout << endl << "Move(end): " << endl;                bst.Move(operation);                break;                        //Test Copy Costructor            case '1':                cout << "See attached file for testing." << endl;                break;                        //Test Assignment Opperator            case '2':                cout << "See attached file for testing." << endl;                break;                        //Test Destructor            case '3':                bst.~BST();                cout << endl;                break;            //Print Main Menu            case 'M':            case 'm':                menu();                break;                        //Quit Program            case 'Q':        	case 'q':        	    cout << endl << "Quitting..." << endl;        		run = false;      //break the main loop        		break;        	        	//Default Case/Invalid Input			default:				cout << endl <<"Not a valid menu option"<< endl;				break;		}	}	return 0;}//************************************//Main Menu Print Functionvoid menu(){   cout << "********************************************************" << endl;   cout << "* +X  To Insert an Item.                               *" << endl;   cout << "* -X  To Remove an Item.                               *" << endl;   cout << "* ?X  To Search for an item in the list.               *" << endl;   cout << "* P   To print the list(Inorder Traversal).            *" << endl;   cout << "* S   To print the list(Postorder Traversal).          *" << endl;   cout << "* R   To print the list(Preorder Traversal).           *" << endl;   cout << "* B   To populate the BST with data from a file.       *" << endl;   cout << "* @   To Print the item at the cursor.                 *" << endl;   cout << "* >   To Move the cursor to the right.                 *" << endl;   cout << "* <   To Move the cursor to the left.                  *" << endl;   cout << "* b   To Move the cursor to the beginning of the list. *" << endl;   cout << "* e   To Move the cursor to the end  of the list.      *" << endl;   cout << "* 1   To test the copy constructor.                    *" << endl;   cout << "* 2   To test the assignment operator.                 *" << endl;   cout << "* 3   To test the destructor.                          *" << endl;    cout << "* m   To display this menu.                            *" << endl;   cout << "* Q   To quit the program.                             *" << endl;   cout << "********************************************************" << endl;}template <class T>void BuildBST(BST<T>& bst, string filename){	T data;	ifstream file;	file.open(filename.c_str());	if(file.fail()){		cout << "NO FILE FOUND" << endl;	}		while(file >> data)		bst.Insert(data);			file.close();	}